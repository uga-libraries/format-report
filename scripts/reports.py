"""Calculate various subtotal reports of the collection, aip, and file counts for format types, format standard
names, and groups. The reports are saved as csv files. """

import datetime
import pandas as pd
import sys

# Makes variables from script arguments.
# formats is the path to the merged ARCHive formats report, which is the data to analyze.
# results is the folder to save reports generated by this script to.
# TODO: add any error handling?
formats = sys.argv[1]
results = sys.argv[2]

# Gets the current date, formatted YYYY-MM, to use in naming the results spreadsheet.
today = datetime.datetime.now().strftime("%Y-%m")

# Read the data from the csv.
df = pd.read_csv(formats)

# For each field or field combination to analyze, uses pandas to calculate the collection count, AIP count, and file
# count for each instance of the field. Fields are:
#       Format type: category of the format, for example audio, image, or text.
#       Format standardized name: a simplified version of the name, for example removing version information.
#       Group: ARCHive group name, which is the department or departments responsible for the content.

type = df.groupby('Format_Type').sum()
name = df.groupby('Format_Standard_Name').sum()
group = df.groupby('Group').sum()
type_group = df.groupby(['Format_Type', 'Group']).sum()
type_name = df.groupby(['Format_Type', 'Format_Standard_Name']).sum()
name_group = df.groupby(['Format_Standard_Name', 'Group']).sum()

# Saves the counts for each field or field combination to a separate tab in the same Excel spreadsheet.
with pd.ExcelWriter(f'{results}/format_analysis_{today}.xlsx') as writer:
    type.to_excel(writer, sheet_name='format type')
    name.to_excel(writer, sheet_name='format name')
    group.to_excel(writer, sheet_name='group')
    type_group.to_excel(writer, sheet_name='format type then group')
    type_name.to_excel(writer, sheet_name='format type then name')
    name_group.to_excel(writer, sheet_name='format name then group')